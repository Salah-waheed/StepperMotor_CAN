
motor_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002278  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002384  08002384  00003384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023a8  080023a8  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080023a8  080023a8  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080023a8  080023a8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023a8  080023a8  000033a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023ac  080023ac  000033ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080023b0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080023bc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080023bc  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093a7  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001863  00000000  00000000  0000d3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0000ec40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000813  00000000  00000000  0000f6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c50  00000000  00000000  0000fecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab8a  00000000  00000000  00026b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b82  00000000  00000000  000316a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8227  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb4  00000000  00000000  000b826c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000038  00000000  00000000  000bae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800236c 	.word	0x0800236c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800236c 	.word	0x0800236c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 faad 	bl	80006b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f84d 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f931 	bl	80003c0 <MX_GPIO_Init>
  MX_CAN_Init();
 800015e:	f000 f885 	bl	800026c <MX_CAN_Init>
  MX_TIM1_Init();
 8000162:	f000 f8d5 	bl	8000310 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 8000166:	481e      	ldr	r0, [pc, #120]	@ (80001e0 <main+0x94>)
 8000168:	f000 fcec 	bl	8000b44 <HAL_CAN_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800016c:	213c      	movs	r1, #60	@ 0x3c
 800016e:	481d      	ldr	r0, [pc, #116]	@ (80001e4 <main+0x98>)
 8000170:	f001 ff52 	bl	8002018 <HAL_TIM_Encoder_Start>
  TxHeader.DLC = 4;
 8000174:	4b1c      	ldr	r3, [pc, #112]	@ (80001e8 <main+0x9c>)
 8000176:	2204      	movs	r2, #4
 8000178:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 800017a:	4b1b      	ldr	r3, [pc, #108]	@ (80001e8 <main+0x9c>)
 800017c:	2200      	movs	r2, #0
 800017e:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 8000180:	4b19      	ldr	r3, [pc, #100]	@ (80001e8 <main+0x9c>)
 8000182:	2200      	movs	r2, #0
 8000184:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000186:	4b18      	ldr	r3, [pc, #96]	@ (80001e8 <main+0x9c>)
 8000188:	2200      	movs	r2, #0
 800018a:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = MSG_ID;
 800018c:	4b16      	ldr	r3, [pc, #88]	@ (80001e8 <main+0x9c>)
 800018e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000192:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000194:	4b14      	ldr	r3, [pc, #80]	@ (80001e8 <main+0x9c>)
 8000196:	2200      	movs	r2, #0
 8000198:	751a      	strb	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int32_t encoder_val = __HAL_TIM_GET_COUNTER(&htim1);
 800019a:	4b12      	ldr	r3, [pc, #72]	@ (80001e4 <main+0x98>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80001a0:	607b      	str	r3, [r7, #4]

	          // Pack into 4 bytes (big-endian)
	          TxData[0] = (encoder_val >> 24) & 0xFF;
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	0e1b      	lsrs	r3, r3, #24
 80001a6:	b2da      	uxtb	r2, r3
 80001a8:	4b10      	ldr	r3, [pc, #64]	@ (80001ec <main+0xa0>)
 80001aa:	701a      	strb	r2, [r3, #0]
	          TxData[1] = (encoder_val >> 16) & 0xFF;
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	141b      	asrs	r3, r3, #16
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4b0e      	ldr	r3, [pc, #56]	@ (80001ec <main+0xa0>)
 80001b4:	705a      	strb	r2, [r3, #1]
	          TxData[2] = (encoder_val >> 8) & 0xFF;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	121b      	asrs	r3, r3, #8
 80001ba:	b2da      	uxtb	r2, r3
 80001bc:	4b0b      	ldr	r3, [pc, #44]	@ (80001ec <main+0xa0>)
 80001be:	709a      	strb	r2, [r3, #2]
	          TxData[3] = encoder_val & 0xFF;
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	b2da      	uxtb	r2, r3
 80001c4:	4b09      	ldr	r3, [pc, #36]	@ (80001ec <main+0xa0>)
 80001c6:	70da      	strb	r2, [r3, #3]

	          HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80001c8:	4b09      	ldr	r3, [pc, #36]	@ (80001f0 <main+0xa4>)
 80001ca:	4a08      	ldr	r2, [pc, #32]	@ (80001ec <main+0xa0>)
 80001cc:	4906      	ldr	r1, [pc, #24]	@ (80001e8 <main+0x9c>)
 80001ce:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <main+0x94>)
 80001d0:	f000 fcfc 	bl	8000bcc <HAL_CAN_AddTxMessage>

	          HAL_Delay(10);  // 100 Hz transmit rate
 80001d4:	200a      	movs	r0, #10
 80001d6:	f000 facd 	bl	8000774 <HAL_Delay>
  {
 80001da:	bf00      	nop
 80001dc:	e7dd      	b.n	800019a <main+0x4e>
 80001de:	bf00      	nop
 80001e0:	20000028 	.word	0x20000028
 80001e4:	20000050 	.word	0x20000050
 80001e8:	20000098 	.word	0x20000098
 80001ec:	200000b4 	.word	0x200000b4
 80001f0:	200000b0 	.word	0x200000b0

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	@ 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	@ 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f002 f886 	bl	8002314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000216:	2302      	movs	r3, #2
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021e:	2310      	movs	r3, #16
 8000220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000222:	2300      	movs	r3, #0
 8000224:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	4618      	mov	r0, r3
 800022c:	f001 fa74 	bl	8001718 <HAL_RCC_OscConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000236:	f000 f90d 	bl	8000454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023a:	230f      	movs	r3, #15
 800023c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800023e:	2300      	movs	r3, #0
 8000240:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f001 fce2 	bl	8001c1c <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800025e:	f000 f8f9 	bl	8000454 <Error_Handler>
  }
}
 8000262:	bf00      	nop
 8000264:	3740      	adds	r7, #64	@ 0x40
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b08a      	sub	sp, #40	@ 0x28
 8000270:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000272:	4b25      	ldr	r3, [pc, #148]	@ (8000308 <MX_CAN_Init+0x9c>)
 8000274:	4a25      	ldr	r2, [pc, #148]	@ (800030c <MX_CAN_Init+0xa0>)
 8000276:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000278:	4b23      	ldr	r3, [pc, #140]	@ (8000308 <MX_CAN_Init+0x9c>)
 800027a:	2212      	movs	r2, #18
 800027c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800027e:	4b22      	ldr	r3, [pc, #136]	@ (8000308 <MX_CAN_Init+0x9c>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000284:	4b20      	ldr	r3, [pc, #128]	@ (8000308 <MX_CAN_Init+0x9c>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800028a:	4b1f      	ldr	r3, [pc, #124]	@ (8000308 <MX_CAN_Init+0x9c>)
 800028c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000290:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000292:	4b1d      	ldr	r3, [pc, #116]	@ (8000308 <MX_CAN_Init+0x9c>)
 8000294:	2200      	movs	r2, #0
 8000296:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000298:	4b1b      	ldr	r3, [pc, #108]	@ (8000308 <MX_CAN_Init+0x9c>)
 800029a:	2200      	movs	r2, #0
 800029c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800029e:	4b1a      	ldr	r3, [pc, #104]	@ (8000308 <MX_CAN_Init+0x9c>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002a4:	4b18      	ldr	r3, [pc, #96]	@ (8000308 <MX_CAN_Init+0x9c>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80002aa:	4b17      	ldr	r3, [pc, #92]	@ (8000308 <MX_CAN_Init+0x9c>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002b0:	4b15      	ldr	r3, [pc, #84]	@ (8000308 <MX_CAN_Init+0x9c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002b6:	4b14      	ldr	r3, [pc, #80]	@ (8000308 <MX_CAN_Init+0x9c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002bc:	4812      	ldr	r0, [pc, #72]	@ (8000308 <MX_CAN_Init+0x9c>)
 80002be:	f000 fa7d 	bl	80007bc <HAL_CAN_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80002c8:	f000 f8c4 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80002d0:	2300      	movs	r3, #0
 80002d2:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80002d4:	2301      	movs	r3, #1
 80002d6:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0x0000;
 80002d8:	2300      	movs	r3, #0
 80002da:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = 0x0000;
 80002dc:	2300      	movs	r3, #0
 80002de:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = 0x0000;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = 0x0000;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80002e8:	2301      	movs	r3, #1
 80002ea:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 80002ec:	2301      	movs	r3, #1
 80002ee:	623b      	str	r3, [r7, #32]
  filterConfig.SlaveStartFilterBank = 13;
 80002f0:	230d      	movs	r3, #13
 80002f2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80002f4:	463b      	mov	r3, r7
 80002f6:	4619      	mov	r1, r3
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <MX_CAN_Init+0x9c>)
 80002fa:	f000 fb5a 	bl	80009b2 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80002fe:	bf00      	nop
 8000300:	3728      	adds	r7, #40	@ 0x28
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000028 	.word	0x20000028
 800030c:	40006400 	.word	0x40006400

08000310 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08c      	sub	sp, #48	@ 0x30
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000316:	f107 030c 	add.w	r3, r7, #12
 800031a:	2224      	movs	r2, #36	@ 0x24
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f001 fff8 	bl	8002314 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800032c:	4b22      	ldr	r3, [pc, #136]	@ (80003b8 <MX_TIM1_Init+0xa8>)
 800032e:	4a23      	ldr	r2, [pc, #140]	@ (80003bc <MX_TIM1_Init+0xac>)
 8000330:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000332:	4b21      	ldr	r3, [pc, #132]	@ (80003b8 <MX_TIM1_Init+0xa8>)
 8000334:	2200      	movs	r2, #0
 8000336:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000338:	4b1f      	ldr	r3, [pc, #124]	@ (80003b8 <MX_TIM1_Init+0xa8>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800033e:	4b1e      	ldr	r3, [pc, #120]	@ (80003b8 <MX_TIM1_Init+0xa8>)
 8000340:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000344:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000346:	4b1c      	ldr	r3, [pc, #112]	@ (80003b8 <MX_TIM1_Init+0xa8>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800034c:	4b1a      	ldr	r3, [pc, #104]	@ (80003b8 <MX_TIM1_Init+0xa8>)
 800034e:	2200      	movs	r2, #0
 8000350:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000352:	4b19      	ldr	r3, [pc, #100]	@ (80003b8 <MX_TIM1_Init+0xa8>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000358:	2303      	movs	r3, #3
 800035a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800035c:	2300      	movs	r3, #0
 800035e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000360:	2301      	movs	r3, #1
 8000362:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800036c:	2300      	movs	r3, #0
 800036e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000370:	2301      	movs	r3, #1
 8000372:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800037c:	f107 030c 	add.w	r3, r7, #12
 8000380:	4619      	mov	r1, r3
 8000382:	480d      	ldr	r0, [pc, #52]	@ (80003b8 <MX_TIM1_Init+0xa8>)
 8000384:	f001 fda6 	bl	8001ed4 <HAL_TIM_Encoder_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800038e:	f000 f861 	bl	8000454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000392:	2300      	movs	r3, #0
 8000394:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000396:	2300      	movs	r3, #0
 8000398:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4619      	mov	r1, r3
 800039e:	4806      	ldr	r0, [pc, #24]	@ (80003b8 <MX_TIM1_Init+0xa8>)
 80003a0:	f001 ff5a 	bl	8002258 <HAL_TIMEx_MasterConfigSynchronization>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80003aa:	f000 f853 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	3730      	adds	r7, #48	@ 0x30
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000050 	.word	0x20000050
 80003bc:	40012c00 	.word	0x40012c00

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d4:	4b1d      	ldr	r3, [pc, #116]	@ (800044c <MX_GPIO_Init+0x8c>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a1c      	ldr	r2, [pc, #112]	@ (800044c <MX_GPIO_Init+0x8c>)
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b1a      	ldr	r3, [pc, #104]	@ (800044c <MX_GPIO_Init+0x8c>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0320 	and.w	r3, r3, #32
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	4b17      	ldr	r3, [pc, #92]	@ (800044c <MX_GPIO_Init+0x8c>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a16      	ldr	r2, [pc, #88]	@ (800044c <MX_GPIO_Init+0x8c>)
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b14      	ldr	r3, [pc, #80]	@ (800044c <MX_GPIO_Init+0x8c>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0308 	and.w	r3, r3, #8
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b11      	ldr	r3, [pc, #68]	@ (800044c <MX_GPIO_Init+0x8c>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a10      	ldr	r2, [pc, #64]	@ (800044c <MX_GPIO_Init+0x8c>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <MX_GPIO_Init+0x8c>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	2104      	movs	r1, #4
 8000420:	480b      	ldr	r0, [pc, #44]	@ (8000450 <MX_GPIO_Init+0x90>)
 8000422:	f001 f961 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000426:	2304      	movs	r3, #4
 8000428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042a:	2301      	movs	r3, #1
 800042c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000432:	2302      	movs	r3, #2
 8000434:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	4619      	mov	r1, r3
 800043c:	4804      	ldr	r0, [pc, #16]	@ (8000450 <MX_GPIO_Init+0x90>)
 800043e:	f000 ffcf 	bl	80013e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000442:	bf00      	nop
 8000444:	3720      	adds	r7, #32
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000
 8000450:	40010c00 	.word	0x40010c00

08000454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i
}
 800045a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <Error_Handler+0x8>

08000460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000466:	4b15      	ldr	r3, [pc, #84]	@ (80004bc <HAL_MspInit+0x5c>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a14      	ldr	r2, [pc, #80]	@ (80004bc <HAL_MspInit+0x5c>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	4b12      	ldr	r3, [pc, #72]	@ (80004bc <HAL_MspInit+0x5c>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <HAL_MspInit+0x5c>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a0e      	ldr	r2, [pc, #56]	@ (80004bc <HAL_MspInit+0x5c>)
 8000484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <HAL_MspInit+0x5c>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000496:	4b0a      	ldr	r3, [pc, #40]	@ (80004c0 <HAL_MspInit+0x60>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	4a04      	ldr	r2, [pc, #16]	@ (80004c0 <HAL_MspInit+0x60>)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010000 	.word	0x40010000

080004c4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a20      	ldr	r2, [pc, #128]	@ (8000560 <HAL_CAN_MspInit+0x9c>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d139      	bne.n	8000558 <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000564 <HAL_CAN_MspInit+0xa0>)
 80004e6:	69db      	ldr	r3, [r3, #28]
 80004e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000564 <HAL_CAN_MspInit+0xa0>)
 80004ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004ee:	61d3      	str	r3, [r2, #28]
 80004f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000564 <HAL_CAN_MspInit+0xa0>)
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b19      	ldr	r3, [pc, #100]	@ (8000564 <HAL_CAN_MspInit+0xa0>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a18      	ldr	r2, [pc, #96]	@ (8000564 <HAL_CAN_MspInit+0xa0>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b16      	ldr	r3, [pc, #88]	@ (8000564 <HAL_CAN_MspInit+0xa0>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000514:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000522:	f107 0310 	add.w	r3, r7, #16
 8000526:	4619      	mov	r1, r3
 8000528:	480f      	ldr	r0, [pc, #60]	@ (8000568 <HAL_CAN_MspInit+0xa4>)
 800052a:	f000 ff59 	bl	80013e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800052e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000534:	2302      	movs	r3, #2
 8000536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000538:	2303      	movs	r3, #3
 800053a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	4809      	ldr	r0, [pc, #36]	@ (8000568 <HAL_CAN_MspInit+0xa4>)
 8000544:	f000 ff4c 	bl	80013e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000548:	2200      	movs	r2, #0
 800054a:	2100      	movs	r1, #0
 800054c:	2015      	movs	r0, #21
 800054e:	f000 ff10 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000552:	2015      	movs	r0, #21
 8000554:	f000 ff29 	bl	80013aa <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000558:	bf00      	nop
 800055a:	3720      	adds	r7, #32
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40006400 	.word	0x40006400
 8000564:	40021000 	.word	0x40021000
 8000568:	40010800 	.word	0x40010800

0800056c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a16      	ldr	r2, [pc, #88]	@ (80005e0 <HAL_TIM_Encoder_MspInit+0x74>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d124      	bne.n	80005d6 <HAL_TIM_Encoder_MspInit+0x6a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800058c:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <HAL_TIM_Encoder_MspInit+0x78>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a14      	ldr	r2, [pc, #80]	@ (80005e4 <HAL_TIM_Encoder_MspInit+0x78>)
 8000592:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b12      	ldr	r3, [pc, #72]	@ (80005e4 <HAL_TIM_Encoder_MspInit+0x78>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a4:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <HAL_TIM_Encoder_MspInit+0x78>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a0e      	ldr	r2, [pc, #56]	@ (80005e4 <HAL_TIM_Encoder_MspInit+0x78>)
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <HAL_TIM_Encoder_MspInit+0x78>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	4619      	mov	r1, r3
 80005d0:	4805      	ldr	r0, [pc, #20]	@ (80005e8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80005d2:	f000 ff05 	bl	80013e0 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80005d6:	bf00      	nop
 80005d8:	3720      	adds	r7, #32
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40012c00 	.word	0x40012c00
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010800 	.word	0x40010800

080005ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <NMI_Handler+0x4>

080005f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <HardFault_Handler+0x4>

080005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <MemManage_Handler+0x4>

08000604 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <BusFault_Handler+0x4>

0800060c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <UsageFault_Handler+0x4>

08000614 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063c:	f000 f87e 	bl	800073c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000648:	4802      	ldr	r0, [pc, #8]	@ (8000654 <CAN1_RX1_IRQHandler+0x10>)
 800064a:	f000 fb8e 	bl	8000d6a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000028 	.word	0x20000028

08000658 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000664:	f7ff fff8 	bl	8000658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000668:	480b      	ldr	r0, [pc, #44]	@ (8000698 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800066a:	490c      	ldr	r1, [pc, #48]	@ (800069c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800066c:	4a0c      	ldr	r2, [pc, #48]	@ (80006a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a09      	ldr	r2, [pc, #36]	@ (80006a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000680:	4c09      	ldr	r4, [pc, #36]	@ (80006a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068e:	f001 fe49 	bl	8002324 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000692:	f7ff fd5b 	bl	800014c <main>
  bx lr
 8000696:	4770      	bx	lr
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800069c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006a0:	080023b0 	.word	0x080023b0
  ldr r2, =_sbss
 80006a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006a8:	200000c0 	.word	0x200000c0

080006ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC1_2_IRQHandler>
	...

080006b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b4:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <HAL_Init+0x28>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a07      	ldr	r2, [pc, #28]	@ (80006d8 <HAL_Init+0x28>)
 80006ba:	f043 0310 	orr.w	r3, r3, #16
 80006be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c0:	2003      	movs	r0, #3
 80006c2:	f000 fe4b 	bl	800135c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006c6:	200f      	movs	r0, #15
 80006c8:	f000 f808 	bl	80006dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006cc:	f7ff fec8 	bl	8000460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40022000 	.word	0x40022000

080006dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <HAL_InitTick+0x54>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <HAL_InitTick+0x58>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fe63 	bl	80013c6 <HAL_SYSTICK_Config>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
 8000708:	e00e      	b.n	8000728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b0f      	cmp	r3, #15
 800070e:	d80a      	bhi.n	8000726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000710:	2200      	movs	r2, #0
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	f04f 30ff 	mov.w	r0, #4294967295
 8000718:	f000 fe2b 	bl	8001372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800071c:	4a06      	ldr	r2, [pc, #24]	@ (8000738 <HAL_InitTick+0x5c>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000722:	2300      	movs	r3, #0
 8000724:	e000      	b.n	8000728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
}
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000000 	.word	0x20000000
 8000734:	20000008 	.word	0x20000008
 8000738:	20000004 	.word	0x20000004

0800073c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000740:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <HAL_IncTick+0x1c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b05      	ldr	r3, [pc, #20]	@ (800075c <HAL_IncTick+0x20>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4413      	add	r3, r2
 800074c:	4a03      	ldr	r2, [pc, #12]	@ (800075c <HAL_IncTick+0x20>)
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	20000008 	.word	0x20000008
 800075c:	200000bc 	.word	0x200000bc

08000760 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return uwTick;
 8000764:	4b02      	ldr	r3, [pc, #8]	@ (8000770 <HAL_GetTick+0x10>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	200000bc 	.word	0x200000bc

08000774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800077c:	f7ff fff0 	bl	8000760 <HAL_GetTick>
 8000780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800078c:	d005      	beq.n	800079a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <HAL_Delay+0x44>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	461a      	mov	r2, r3
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	4413      	add	r3, r2
 8000798:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800079a:	bf00      	nop
 800079c:	f7ff ffe0 	bl	8000760 <HAL_GetTick>
 80007a0:	4602      	mov	r2, r0
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d8f7      	bhi.n	800079c <HAL_Delay+0x28>
  {
  }
}
 80007ac:	bf00      	nop
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000008 	.word	0x20000008

080007bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d101      	bne.n	80007ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e0ed      	b.n	80009aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d102      	bne.n	80007e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff fe72 	bl	80004c4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f042 0201 	orr.w	r2, r2, #1
 80007ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007f0:	f7ff ffb6 	bl	8000760 <HAL_GetTick>
 80007f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007f6:	e012      	b.n	800081e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007f8:	f7ff ffb2 	bl	8000760 <HAL_GetTick>
 80007fc:	4602      	mov	r2, r0
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	2b0a      	cmp	r3, #10
 8000804:	d90b      	bls.n	800081e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800080a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2205      	movs	r2, #5
 8000816:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e0c5      	b.n	80009aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0e5      	beq.n	80007f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f022 0202 	bic.w	r2, r2, #2
 800083a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800083c:	f7ff ff90 	bl	8000760 <HAL_GetTick>
 8000840:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000842:	e012      	b.n	800086a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000844:	f7ff ff8c 	bl	8000760 <HAL_GetTick>
 8000848:	4602      	mov	r2, r0
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	2b0a      	cmp	r3, #10
 8000850:	d90b      	bls.n	800086a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000856:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2205      	movs	r2, #5
 8000862:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	e09f      	b.n	80009aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f003 0302 	and.w	r3, r3, #2
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1e5      	bne.n	8000844 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7e1b      	ldrb	r3, [r3, #24]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d108      	bne.n	8000892 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	e007      	b.n	80008a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80008a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	7e5b      	ldrb	r3, [r3, #25]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d108      	bne.n	80008bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	e007      	b.n	80008cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80008ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	7e9b      	ldrb	r3, [r3, #26]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d108      	bne.n	80008e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f042 0220 	orr.w	r2, r2, #32
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	e007      	b.n	80008f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f022 0220 	bic.w	r2, r2, #32
 80008f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	7edb      	ldrb	r3, [r3, #27]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d108      	bne.n	8000910 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f022 0210 	bic.w	r2, r2, #16
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	e007      	b.n	8000920 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f042 0210 	orr.w	r2, r2, #16
 800091e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	7f1b      	ldrb	r3, [r3, #28]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d108      	bne.n	800093a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f042 0208 	orr.w	r2, r2, #8
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	e007      	b.n	800094a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f022 0208 	bic.w	r2, r2, #8
 8000948:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	7f5b      	ldrb	r3, [r3, #29]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d108      	bne.n	8000964 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f042 0204 	orr.w	r2, r2, #4
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	e007      	b.n	8000974 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f022 0204 	bic.w	r2, r2, #4
 8000972:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	431a      	orrs	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	691b      	ldr	r3, [r3, #16]
 8000982:	431a      	orrs	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	ea42 0103 	orr.w	r1, r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	1e5a      	subs	r2, r3, #1
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	430a      	orrs	r2, r1
 8000998:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2201      	movs	r2, #1
 80009a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b087      	sub	sp, #28
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009c8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80009ca:	7cfb      	ldrb	r3, [r7, #19]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d003      	beq.n	80009d8 <HAL_CAN_ConfigFilter+0x26>
 80009d0:	7cfb      	ldrb	r3, [r7, #19]
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	f040 80aa 	bne.w	8000b2c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80009de:	f043 0201 	orr.w	r2, r3, #1
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	f003 031f 	and.w	r3, r3, #31
 80009f0:	2201      	movs	r2, #1
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	43db      	mvns	r3, r3
 8000a02:	401a      	ands	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d123      	bne.n	8000a5a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a34:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	3248      	adds	r2, #72	@ 0x48
 8000a3a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a4e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a50:	6979      	ldr	r1, [r7, #20]
 8000a52:	3348      	adds	r3, #72	@ 0x48
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	440b      	add	r3, r1
 8000a58:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d122      	bne.n	8000aa8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a82:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	3248      	adds	r2, #72	@ 0x48
 8000a88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a9e:	6979      	ldr	r1, [r7, #20]
 8000aa0:	3348      	adds	r3, #72	@ 0x48
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	440b      	add	r3, r1
 8000aa6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d109      	bne.n	8000ac4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	401a      	ands	r2, r3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000ac2:	e007      	b.n	8000ad4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	431a      	orrs	r2, r3
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	691b      	ldr	r3, [r3, #16]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d109      	bne.n	8000af0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000aee:	e007      	b.n	8000b00 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	431a      	orrs	r2, r3
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	6a1b      	ldr	r3, [r3, #32]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d107      	bne.n	8000b18 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	431a      	orrs	r2, r3
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b1e:	f023 0201 	bic.w	r2, r3, #1
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e006      	b.n	8000b3a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b30:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
  }
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	371c      	adds	r7, #28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d12e      	bne.n	8000bb6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f022 0201 	bic.w	r2, r2, #1
 8000b6e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b70:	f7ff fdf6 	bl	8000760 <HAL_GetTick>
 8000b74:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b76:	e012      	b.n	8000b9e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b78:	f7ff fdf2 	bl	8000760 <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	2b0a      	cmp	r3, #10
 8000b84:	d90b      	bls.n	8000b9e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b8a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2205      	movs	r2, #5
 8000b96:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e012      	b.n	8000bc4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1e5      	bne.n	8000b78 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e006      	b.n	8000bc4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bba:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
  }
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	@ 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000be0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000bea:	7ffb      	ldrb	r3, [r7, #31]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d003      	beq.n	8000bf8 <HAL_CAN_AddTxMessage+0x2c>
 8000bf0:	7ffb      	ldrb	r3, [r7, #31]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	f040 80ad 	bne.w	8000d52 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10a      	bne.n	8000c18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d105      	bne.n	8000c18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f000 8095 	beq.w	8000d42 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	0e1b      	lsrs	r3, r3, #24
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c22:	2201      	movs	r2, #1
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d10d      	bne.n	8000c50 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c3e:	68f9      	ldr	r1, [r7, #12]
 8000c40:	6809      	ldr	r1, [r1, #0]
 8000c42:	431a      	orrs	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3318      	adds	r3, #24
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	440b      	add	r3, r1
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	e00f      	b.n	8000c70 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c5a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c60:	68f9      	ldr	r1, [r7, #12]
 8000c62:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c64:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3318      	adds	r3, #24
 8000c6a:	011b      	lsls	r3, r3, #4
 8000c6c:	440b      	add	r3, r1
 8000c6e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	6819      	ldr	r1, [r3, #0]
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	691a      	ldr	r2, [r3, #16]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	3318      	adds	r3, #24
 8000c7c:	011b      	lsls	r3, r3, #4
 8000c7e:	440b      	add	r3, r1
 8000c80:	3304      	adds	r3, #4
 8000c82:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	7d1b      	ldrb	r3, [r3, #20]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d111      	bne.n	8000cb0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	3318      	adds	r3, #24
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	4413      	add	r3, r2
 8000c98:	3304      	adds	r3, #4
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	6811      	ldr	r1, [r2, #0]
 8000ca0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	3318      	adds	r3, #24
 8000ca8:	011b      	lsls	r3, r3, #4
 8000caa:	440b      	add	r3, r1
 8000cac:	3304      	adds	r3, #4
 8000cae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3307      	adds	r3, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	061a      	lsls	r2, r3, #24
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3306      	adds	r3, #6
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	041b      	lsls	r3, r3, #16
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3305      	adds	r3, #5
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	3204      	adds	r2, #4
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	6811      	ldr	r1, [r2, #0]
 8000cd8:	ea43 0200 	orr.w	r2, r3, r0
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	440b      	add	r3, r1
 8000ce2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000ce6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3303      	adds	r3, #3
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	061a      	lsls	r2, r3, #24
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	041b      	lsls	r3, r3, #16
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	4313      	orrs	r3, r2
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4610      	mov	r0, r2
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	6811      	ldr	r1, [r2, #0]
 8000d0e:	ea43 0200 	orr.w	r2, r3, r0
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	440b      	add	r3, r1
 8000d18:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000d1c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3318      	adds	r3, #24
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	4413      	add	r3, r2
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	6811      	ldr	r1, [r2, #0]
 8000d30:	f043 0201 	orr.w	r2, r3, #1
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3318      	adds	r3, #24
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	440b      	add	r3, r1
 8000d3c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e00e      	b.n	8000d60 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d46:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e006      	b.n	8000d60 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d56:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
  }
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3724      	adds	r7, #36	@ 0x24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b08a      	sub	sp, #40	@ 0x28
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000da6:	6a3b      	ldr	r3, [r7, #32]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d07c      	beq.n	8000eaa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d023      	beq.n	8000e02 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 f983 	bl	80010d8 <HAL_CAN_TxMailbox0CompleteCallback>
 8000dd2:	e016      	b.n	8000e02 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d004      	beq.n	8000de8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000de6:	e00c      	b.n	8000e02 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	f003 0308 	and.w	r3, r3, #8
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d004      	beq.n	8000dfc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dfa:	e002      	b.n	8000e02 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f000 f986 	bl	800110e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d024      	beq.n	8000e56 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f000 f962 	bl	80010ea <HAL_CAN_TxMailbox1CompleteCallback>
 8000e26:	e016      	b.n	8000e56 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d004      	beq.n	8000e3c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e34:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e3a:	e00c      	b.n	8000e56 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d004      	beq.n	8000e50 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e4e:	e002      	b.n	8000e56 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f000 f965 	bl	8001120 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d024      	beq.n	8000eaa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f000 f941 	bl	80010fc <HAL_CAN_TxMailbox2CompleteCallback>
 8000e7a:	e016      	b.n	8000eaa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d004      	beq.n	8000e90 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e8e:	e00c      	b.n	8000eaa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d004      	beq.n	8000ea4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ea2:	e002      	b.n	8000eaa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f944 	bl	8001132 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000eaa:	6a3b      	ldr	r3, [r7, #32]
 8000eac:	f003 0308 	and.w	r3, r3, #8
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d00c      	beq.n	8000ece <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d007      	beq.n	8000ece <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2210      	movs	r2, #16
 8000ecc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000ece:	6a3b      	ldr	r3, [r7, #32]
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00b      	beq.n	8000ef0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d006      	beq.n	8000ef0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2208      	movs	r2, #8
 8000ee8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 f933 	bl	8001156 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d009      	beq.n	8000f0e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d002      	beq.n	8000f0e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 f91b 	bl	8001144 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f0e:	6a3b      	ldr	r3, [r7, #32]
 8000f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00c      	beq.n	8000f32 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d007      	beq.n	8000f32 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2210      	movs	r2, #16
 8000f30:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	f003 0320 	and.w	r3, r3, #32
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00b      	beq.n	8000f54 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d006      	beq.n	8000f54 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f913 	bl	800117a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000f54:	6a3b      	ldr	r3, [r7, #32]
 8000f56:	f003 0310 	and.w	r3, r3, #16
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d009      	beq.n	8000f72 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f8fb 	bl	8001168 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000f72:	6a3b      	ldr	r3, [r7, #32]
 8000f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00b      	beq.n	8000f94 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f003 0310 	and.w	r3, r3, #16
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d006      	beq.n	8000f94 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2210      	movs	r2, #16
 8000f8c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 f8fc 	bl	800118c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000f94:	6a3b      	ldr	r3, [r7, #32]
 8000f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00b      	beq.n	8000fb6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f003 0308 	and.w	r3, r3, #8
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d006      	beq.n	8000fb6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2208      	movs	r2, #8
 8000fae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f8f4 	bl	800119e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
 8000fb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d07b      	beq.n	80010b8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d072      	beq.n	80010b0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000fca:	6a3b      	ldr	r3, [r7, #32]
 8000fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d008      	beq.n	8000fe6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d008      	beq.n	8001002 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001002:	6a3b      	ldr	r3, [r7, #32]
 8001004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001008:	2b00      	cmp	r3, #0
 800100a:	d008      	beq.n	800101e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001024:	2b00      	cmp	r3, #0
 8001026:	d043      	beq.n	80010b0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800102e:	2b00      	cmp	r3, #0
 8001030:	d03e      	beq.n	80010b0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001038:	2b60      	cmp	r3, #96	@ 0x60
 800103a:	d02b      	beq.n	8001094 <HAL_CAN_IRQHandler+0x32a>
 800103c:	2b60      	cmp	r3, #96	@ 0x60
 800103e:	d82e      	bhi.n	800109e <HAL_CAN_IRQHandler+0x334>
 8001040:	2b50      	cmp	r3, #80	@ 0x50
 8001042:	d022      	beq.n	800108a <HAL_CAN_IRQHandler+0x320>
 8001044:	2b50      	cmp	r3, #80	@ 0x50
 8001046:	d82a      	bhi.n	800109e <HAL_CAN_IRQHandler+0x334>
 8001048:	2b40      	cmp	r3, #64	@ 0x40
 800104a:	d019      	beq.n	8001080 <HAL_CAN_IRQHandler+0x316>
 800104c:	2b40      	cmp	r3, #64	@ 0x40
 800104e:	d826      	bhi.n	800109e <HAL_CAN_IRQHandler+0x334>
 8001050:	2b30      	cmp	r3, #48	@ 0x30
 8001052:	d010      	beq.n	8001076 <HAL_CAN_IRQHandler+0x30c>
 8001054:	2b30      	cmp	r3, #48	@ 0x30
 8001056:	d822      	bhi.n	800109e <HAL_CAN_IRQHandler+0x334>
 8001058:	2b10      	cmp	r3, #16
 800105a:	d002      	beq.n	8001062 <HAL_CAN_IRQHandler+0x2f8>
 800105c:	2b20      	cmp	r3, #32
 800105e:	d005      	beq.n	800106c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001060:	e01d      	b.n	800109e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001064:	f043 0308 	orr.w	r3, r3, #8
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800106a:	e019      	b.n	80010a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800106c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106e:	f043 0310 	orr.w	r3, r3, #16
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001074:	e014      	b.n	80010a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	f043 0320 	orr.w	r3, r3, #32
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800107e:	e00f      	b.n	80010a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001088:	e00a      	b.n	80010a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800108a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001092:	e005      	b.n	80010a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800109c:	e000      	b.n	80010a0 <HAL_CAN_IRQHandler+0x336>
            break;
 800109e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	699a      	ldr	r2, [r3, #24]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80010ae:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2204      	movs	r2, #4
 80010b6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80010b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d008      	beq.n	80010d0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c4:	431a      	orrs	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 f870 	bl	80011b0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	@ 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr

080010ea <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr

0800110e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr

08001132 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr

0800117a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr

0800119e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
	...

080011c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	@ (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	db0b      	blt.n	8001252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 021f 	and.w	r2, r3, #31
 8001240:	4906      	ldr	r1, [pc, #24]	@ (800125c <__NVIC_EnableIRQ+0x34>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	095b      	lsrs	r3, r3, #5
 8001248:	2001      	movs	r0, #1
 800124a:	fa00 f202 	lsl.w	r2, r0, r2
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100

08001260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	@ (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	@ (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	@ 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
         );
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	@ 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001328:	d301      	bcc.n	800132e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132a:	2301      	movs	r3, #1
 800132c:	e00f      	b.n	800134e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132e:	4a0a      	ldr	r2, [pc, #40]	@ (8001358 <SysTick_Config+0x40>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001336:	210f      	movs	r1, #15
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f7ff ff90 	bl	8001260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001340:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <SysTick_Config+0x40>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001346:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <SysTick_Config+0x40>)
 8001348:	2207      	movs	r2, #7
 800134a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	e000e010 	.word	0xe000e010

0800135c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff2d 	bl	80011c4 <__NVIC_SetPriorityGrouping>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001384:	f7ff ff42 	bl	800120c <__NVIC_GetPriorityGrouping>
 8001388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	6978      	ldr	r0, [r7, #20]
 8001390:	f7ff ff90 	bl	80012b4 <NVIC_EncodePriority>
 8001394:	4602      	mov	r2, r0
 8001396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff5f 	bl	8001260 <__NVIC_SetPriority>
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff35 	bl	8001228 <__NVIC_EnableIRQ>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ffa2 	bl	8001318 <SysTick_Config>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b08b      	sub	sp, #44	@ 0x2c
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f2:	e169      	b.n	80016c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013f4:	2201      	movs	r2, #1
 80013f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	429a      	cmp	r2, r3
 800140e:	f040 8158 	bne.w	80016c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4a9a      	ldr	r2, [pc, #616]	@ (8001680 <HAL_GPIO_Init+0x2a0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d05e      	beq.n	80014da <HAL_GPIO_Init+0xfa>
 800141c:	4a98      	ldr	r2, [pc, #608]	@ (8001680 <HAL_GPIO_Init+0x2a0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d875      	bhi.n	800150e <HAL_GPIO_Init+0x12e>
 8001422:	4a98      	ldr	r2, [pc, #608]	@ (8001684 <HAL_GPIO_Init+0x2a4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d058      	beq.n	80014da <HAL_GPIO_Init+0xfa>
 8001428:	4a96      	ldr	r2, [pc, #600]	@ (8001684 <HAL_GPIO_Init+0x2a4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d86f      	bhi.n	800150e <HAL_GPIO_Init+0x12e>
 800142e:	4a96      	ldr	r2, [pc, #600]	@ (8001688 <HAL_GPIO_Init+0x2a8>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d052      	beq.n	80014da <HAL_GPIO_Init+0xfa>
 8001434:	4a94      	ldr	r2, [pc, #592]	@ (8001688 <HAL_GPIO_Init+0x2a8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d869      	bhi.n	800150e <HAL_GPIO_Init+0x12e>
 800143a:	4a94      	ldr	r2, [pc, #592]	@ (800168c <HAL_GPIO_Init+0x2ac>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d04c      	beq.n	80014da <HAL_GPIO_Init+0xfa>
 8001440:	4a92      	ldr	r2, [pc, #584]	@ (800168c <HAL_GPIO_Init+0x2ac>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d863      	bhi.n	800150e <HAL_GPIO_Init+0x12e>
 8001446:	4a92      	ldr	r2, [pc, #584]	@ (8001690 <HAL_GPIO_Init+0x2b0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d046      	beq.n	80014da <HAL_GPIO_Init+0xfa>
 800144c:	4a90      	ldr	r2, [pc, #576]	@ (8001690 <HAL_GPIO_Init+0x2b0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d85d      	bhi.n	800150e <HAL_GPIO_Init+0x12e>
 8001452:	2b12      	cmp	r3, #18
 8001454:	d82a      	bhi.n	80014ac <HAL_GPIO_Init+0xcc>
 8001456:	2b12      	cmp	r3, #18
 8001458:	d859      	bhi.n	800150e <HAL_GPIO_Init+0x12e>
 800145a:	a201      	add	r2, pc, #4	@ (adr r2, 8001460 <HAL_GPIO_Init+0x80>)
 800145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001460:	080014db 	.word	0x080014db
 8001464:	080014b5 	.word	0x080014b5
 8001468:	080014c7 	.word	0x080014c7
 800146c:	08001509 	.word	0x08001509
 8001470:	0800150f 	.word	0x0800150f
 8001474:	0800150f 	.word	0x0800150f
 8001478:	0800150f 	.word	0x0800150f
 800147c:	0800150f 	.word	0x0800150f
 8001480:	0800150f 	.word	0x0800150f
 8001484:	0800150f 	.word	0x0800150f
 8001488:	0800150f 	.word	0x0800150f
 800148c:	0800150f 	.word	0x0800150f
 8001490:	0800150f 	.word	0x0800150f
 8001494:	0800150f 	.word	0x0800150f
 8001498:	0800150f 	.word	0x0800150f
 800149c:	0800150f 	.word	0x0800150f
 80014a0:	0800150f 	.word	0x0800150f
 80014a4:	080014bd 	.word	0x080014bd
 80014a8:	080014d1 	.word	0x080014d1
 80014ac:	4a79      	ldr	r2, [pc, #484]	@ (8001694 <HAL_GPIO_Init+0x2b4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d013      	beq.n	80014da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014b2:	e02c      	b.n	800150e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	623b      	str	r3, [r7, #32]
          break;
 80014ba:	e029      	b.n	8001510 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	3304      	adds	r3, #4
 80014c2:	623b      	str	r3, [r7, #32]
          break;
 80014c4:	e024      	b.n	8001510 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	3308      	adds	r3, #8
 80014cc:	623b      	str	r3, [r7, #32]
          break;
 80014ce:	e01f      	b.n	8001510 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	330c      	adds	r3, #12
 80014d6:	623b      	str	r3, [r7, #32]
          break;
 80014d8:	e01a      	b.n	8001510 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014e2:	2304      	movs	r3, #4
 80014e4:	623b      	str	r3, [r7, #32]
          break;
 80014e6:	e013      	b.n	8001510 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d105      	bne.n	80014fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f0:	2308      	movs	r3, #8
 80014f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69fa      	ldr	r2, [r7, #28]
 80014f8:	611a      	str	r2, [r3, #16]
          break;
 80014fa:	e009      	b.n	8001510 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014fc:	2308      	movs	r3, #8
 80014fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	615a      	str	r2, [r3, #20]
          break;
 8001506:	e003      	b.n	8001510 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
          break;
 800150c:	e000      	b.n	8001510 <HAL_GPIO_Init+0x130>
          break;
 800150e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2bff      	cmp	r3, #255	@ 0xff
 8001514:	d801      	bhi.n	800151a <HAL_GPIO_Init+0x13a>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	e001      	b.n	800151e <HAL_GPIO_Init+0x13e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3304      	adds	r3, #4
 800151e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	2bff      	cmp	r3, #255	@ 0xff
 8001524:	d802      	bhi.n	800152c <HAL_GPIO_Init+0x14c>
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	e002      	b.n	8001532 <HAL_GPIO_Init+0x152>
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152e:	3b08      	subs	r3, #8
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	210f      	movs	r1, #15
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	401a      	ands	r2, r3
 8001544:	6a39      	ldr	r1, [r7, #32]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	431a      	orrs	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 80b1 	beq.w	80016c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001560:	4b4d      	ldr	r3, [pc, #308]	@ (8001698 <HAL_GPIO_Init+0x2b8>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a4c      	ldr	r2, [pc, #304]	@ (8001698 <HAL_GPIO_Init+0x2b8>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b4a      	ldr	r3, [pc, #296]	@ (8001698 <HAL_GPIO_Init+0x2b8>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001578:	4a48      	ldr	r2, [pc, #288]	@ (800169c <HAL_GPIO_Init+0x2bc>)
 800157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157c:	089b      	lsrs	r3, r3, #2
 800157e:	3302      	adds	r3, #2
 8001580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001584:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	220f      	movs	r2, #15
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	4013      	ands	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a40      	ldr	r2, [pc, #256]	@ (80016a0 <HAL_GPIO_Init+0x2c0>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d013      	beq.n	80015cc <HAL_GPIO_Init+0x1ec>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a3f      	ldr	r2, [pc, #252]	@ (80016a4 <HAL_GPIO_Init+0x2c4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d00d      	beq.n	80015c8 <HAL_GPIO_Init+0x1e8>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a3e      	ldr	r2, [pc, #248]	@ (80016a8 <HAL_GPIO_Init+0x2c8>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d007      	beq.n	80015c4 <HAL_GPIO_Init+0x1e4>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a3d      	ldr	r2, [pc, #244]	@ (80016ac <HAL_GPIO_Init+0x2cc>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d101      	bne.n	80015c0 <HAL_GPIO_Init+0x1e0>
 80015bc:	2303      	movs	r3, #3
 80015be:	e006      	b.n	80015ce <HAL_GPIO_Init+0x1ee>
 80015c0:	2304      	movs	r3, #4
 80015c2:	e004      	b.n	80015ce <HAL_GPIO_Init+0x1ee>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e002      	b.n	80015ce <HAL_GPIO_Init+0x1ee>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <HAL_GPIO_Init+0x1ee>
 80015cc:	2300      	movs	r3, #0
 80015ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d0:	f002 0203 	and.w	r2, r2, #3
 80015d4:	0092      	lsls	r2, r2, #2
 80015d6:	4093      	lsls	r3, r2
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015de:	492f      	ldr	r1, [pc, #188]	@ (800169c <HAL_GPIO_Init+0x2bc>)
 80015e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	3302      	adds	r3, #2
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015f8:	4b2d      	ldr	r3, [pc, #180]	@ (80016b0 <HAL_GPIO_Init+0x2d0>)
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	492c      	ldr	r1, [pc, #176]	@ (80016b0 <HAL_GPIO_Init+0x2d0>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	608b      	str	r3, [r1, #8]
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001606:	4b2a      	ldr	r3, [pc, #168]	@ (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	43db      	mvns	r3, r3
 800160e:	4928      	ldr	r1, [pc, #160]	@ (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001610:	4013      	ands	r3, r2
 8001612:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001620:	4b23      	ldr	r3, [pc, #140]	@ (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	4922      	ldr	r1, [pc, #136]	@ (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	60cb      	str	r3, [r1, #12]
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800162e:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	43db      	mvns	r3, r3
 8001636:	491e      	ldr	r1, [pc, #120]	@ (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001638:	4013      	ands	r3, r2
 800163a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001648:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <HAL_GPIO_Init+0x2d0>)
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	4918      	ldr	r1, [pc, #96]	@ (80016b0 <HAL_GPIO_Init+0x2d0>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001656:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	43db      	mvns	r3, r3
 800165e:	4914      	ldr	r1, [pc, #80]	@ (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001660:	4013      	ands	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d021      	beq.n	80016b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001670:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	490e      	ldr	r1, [pc, #56]	@ (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
 800167c:	e021      	b.n	80016c2 <HAL_GPIO_Init+0x2e2>
 800167e:	bf00      	nop
 8001680:	10320000 	.word	0x10320000
 8001684:	10310000 	.word	0x10310000
 8001688:	10220000 	.word	0x10220000
 800168c:	10210000 	.word	0x10210000
 8001690:	10120000 	.word	0x10120000
 8001694:	10110000 	.word	0x10110000
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000
 80016a0:	40010800 	.word	0x40010800
 80016a4:	40010c00 	.word	0x40010c00
 80016a8:	40011000 	.word	0x40011000
 80016ac:	40011400 	.word	0x40011400
 80016b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016b4:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <HAL_GPIO_Init+0x304>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	4909      	ldr	r1, [pc, #36]	@ (80016e4 <HAL_GPIO_Init+0x304>)
 80016be:	4013      	ands	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c4:	3301      	adds	r3, #1
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ce:	fa22 f303 	lsr.w	r3, r2, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f47f ae8e 	bne.w	80013f4 <HAL_GPIO_Init+0x14>
  }
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	372c      	adds	r7, #44	@ 0x2c
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	40010400 	.word	0x40010400

080016e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
 80016f4:	4613      	mov	r3, r2
 80016f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f8:	787b      	ldrb	r3, [r7, #1]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001704:	e003      	b.n	800170e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	041a      	lsls	r2, r3, #16
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	611a      	str	r2, [r3, #16]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e272      	b.n	8001c10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8087 	beq.w	8001846 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001738:	4b92      	ldr	r3, [pc, #584]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b04      	cmp	r3, #4
 8001742:	d00c      	beq.n	800175e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001744:	4b8f      	ldr	r3, [pc, #572]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	d112      	bne.n	8001776 <HAL_RCC_OscConfig+0x5e>
 8001750:	4b8c      	ldr	r3, [pc, #560]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800175c:	d10b      	bne.n	8001776 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175e:	4b89      	ldr	r3, [pc, #548]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d06c      	beq.n	8001844 <HAL_RCC_OscConfig+0x12c>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d168      	bne.n	8001844 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e24c      	b.n	8001c10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x76>
 8001780:	4b80      	ldr	r3, [pc, #512]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a7f      	ldr	r2, [pc, #508]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	e02e      	b.n	80017ec <HAL_RCC_OscConfig+0xd4>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x98>
 8001796:	4b7b      	ldr	r3, [pc, #492]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a7a      	ldr	r2, [pc, #488]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 800179c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b78      	ldr	r3, [pc, #480]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a77      	ldr	r2, [pc, #476]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e01d      	b.n	80017ec <HAL_RCC_OscConfig+0xd4>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0xbc>
 80017ba:	4b72      	ldr	r3, [pc, #456]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a71      	ldr	r2, [pc, #452]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e00b      	b.n	80017ec <HAL_RCC_OscConfig+0xd4>
 80017d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b68      	ldr	r3, [pc, #416]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a67      	ldr	r2, [pc, #412]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d013      	beq.n	800181c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7fe ffb4 	bl	8000760 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fc:	f7fe ffb0 	bl	8000760 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	@ 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e200      	b.n	8001c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180e:	4b5d      	ldr	r3, [pc, #372]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0xe4>
 800181a:	e014      	b.n	8001846 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7fe ffa0 	bl	8000760 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001824:	f7fe ff9c 	bl	8000760 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	@ 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e1ec      	b.n	8001c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001836:	4b53      	ldr	r3, [pc, #332]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x10c>
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d063      	beq.n	800191a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001852:	4b4c      	ldr	r3, [pc, #304]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00b      	beq.n	8001876 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800185e:	4b49      	ldr	r3, [pc, #292]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b08      	cmp	r3, #8
 8001868:	d11c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x18c>
 800186a:	4b46      	ldr	r3, [pc, #280]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d116      	bne.n	80018a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	4b43      	ldr	r3, [pc, #268]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d005      	beq.n	800188e <HAL_RCC_OscConfig+0x176>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d001      	beq.n	800188e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e1c0      	b.n	8001c10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188e:	4b3d      	ldr	r3, [pc, #244]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4939      	ldr	r1, [pc, #228]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	e03a      	b.n	800191a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d020      	beq.n	80018ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ac:	4b36      	ldr	r3, [pc, #216]	@ (8001988 <HAL_RCC_OscConfig+0x270>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7fe ff55 	bl	8000760 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ba:	f7fe ff51 	bl	8000760 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e1a1      	b.n	8001c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4927      	ldr	r1, [pc, #156]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]
 80018ec:	e015      	b.n	800191a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ee:	4b26      	ldr	r3, [pc, #152]	@ (8001988 <HAL_RCC_OscConfig+0x270>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7fe ff34 	bl	8000760 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fc:	f7fe ff30 	bl	8000760 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e180      	b.n	8001c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190e:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d03a      	beq.n	800199c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d019      	beq.n	8001962 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192e:	4b17      	ldr	r3, [pc, #92]	@ (800198c <HAL_RCC_OscConfig+0x274>)
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001934:	f7fe ff14 	bl	8000760 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193c:	f7fe ff10 	bl	8000760 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e160      	b.n	8001c10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194e:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800195a:	2001      	movs	r0, #1
 800195c:	f000 fa9c 	bl	8001e98 <RCC_Delay>
 8001960:	e01c      	b.n	800199c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001962:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <HAL_RCC_OscConfig+0x274>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001968:	f7fe fefa 	bl	8000760 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196e:	e00f      	b.n	8001990 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001970:	f7fe fef6 	bl	8000760 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d908      	bls.n	8001990 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e146      	b.n	8001c10 <HAL_RCC_OscConfig+0x4f8>
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	42420000 	.word	0x42420000
 800198c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001990:	4b92      	ldr	r3, [pc, #584]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1e9      	bne.n	8001970 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80a6 	beq.w	8001af6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ae:	4b8b      	ldr	r3, [pc, #556]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10d      	bne.n	80019d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	4b88      	ldr	r3, [pc, #544]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a87      	ldr	r2, [pc, #540]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	61d3      	str	r3, [r2, #28]
 80019c6:	4b85      	ldr	r3, [pc, #532]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d2:	2301      	movs	r3, #1
 80019d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d6:	4b82      	ldr	r3, [pc, #520]	@ (8001be0 <HAL_RCC_OscConfig+0x4c8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d118      	bne.n	8001a14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e2:	4b7f      	ldr	r3, [pc, #508]	@ (8001be0 <HAL_RCC_OscConfig+0x4c8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a7e      	ldr	r2, [pc, #504]	@ (8001be0 <HAL_RCC_OscConfig+0x4c8>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ee:	f7fe feb7 	bl	8000760 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f6:	f7fe feb3 	bl	8000760 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b64      	cmp	r3, #100	@ 0x64
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e103      	b.n	8001c10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	4b75      	ldr	r3, [pc, #468]	@ (8001be0 <HAL_RCC_OscConfig+0x4c8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x312>
 8001a1c:	4b6f      	ldr	r3, [pc, #444]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	4a6e      	ldr	r2, [pc, #440]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6213      	str	r3, [r2, #32]
 8001a28:	e02d      	b.n	8001a86 <HAL_RCC_OscConfig+0x36e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x334>
 8001a32:	4b6a      	ldr	r3, [pc, #424]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4a69      	ldr	r2, [pc, #420]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	6213      	str	r3, [r2, #32]
 8001a3e:	4b67      	ldr	r3, [pc, #412]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4a66      	ldr	r2, [pc, #408]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	f023 0304 	bic.w	r3, r3, #4
 8001a48:	6213      	str	r3, [r2, #32]
 8001a4a:	e01c      	b.n	8001a86 <HAL_RCC_OscConfig+0x36e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b05      	cmp	r3, #5
 8001a52:	d10c      	bne.n	8001a6e <HAL_RCC_OscConfig+0x356>
 8001a54:	4b61      	ldr	r3, [pc, #388]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	4a60      	ldr	r2, [pc, #384]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6213      	str	r3, [r2, #32]
 8001a60:	4b5e      	ldr	r3, [pc, #376]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	4a5d      	ldr	r2, [pc, #372]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6213      	str	r3, [r2, #32]
 8001a6c:	e00b      	b.n	8001a86 <HAL_RCC_OscConfig+0x36e>
 8001a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	4a5a      	ldr	r2, [pc, #360]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	6213      	str	r3, [r2, #32]
 8001a7a:	4b58      	ldr	r3, [pc, #352]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	4a57      	ldr	r2, [pc, #348]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d015      	beq.n	8001aba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7fe fe67 	bl	8000760 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7fe fe63 	bl	8000760 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0b1      	b.n	8001c10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aac:	4b4b      	ldr	r3, [pc, #300]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0ee      	beq.n	8001a96 <HAL_RCC_OscConfig+0x37e>
 8001ab8:	e014      	b.n	8001ae4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7fe fe51 	bl	8000760 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7fe fe4d 	bl	8000760 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e09b      	b.n	8001c10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad8:	4b40      	ldr	r3, [pc, #256]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1ee      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d105      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aea:	4b3c      	ldr	r3, [pc, #240]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4a3b      	ldr	r2, [pc, #236]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001af4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8087 	beq.w	8001c0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b00:	4b36      	ldr	r3, [pc, #216]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d061      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d146      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b14:	4b33      	ldr	r3, [pc, #204]	@ (8001be4 <HAL_RCC_OscConfig+0x4cc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7fe fe21 	bl	8000760 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7fe fe1d 	bl	8000760 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e06d      	b.n	8001c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b34:	4b29      	ldr	r3, [pc, #164]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b48:	d108      	bne.n	8001b5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b4a:	4b24      	ldr	r3, [pc, #144]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	4921      	ldr	r1, [pc, #132]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a19      	ldr	r1, [r3, #32]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	491b      	ldr	r1, [pc, #108]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b74:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <HAL_RCC_OscConfig+0x4cc>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7a:	f7fe fdf1 	bl	8000760 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b82:	f7fe fded 	bl	8000760 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e03d      	b.n	8001c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b94:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x46a>
 8001ba0:	e035      	b.n	8001c0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba2:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <HAL_RCC_OscConfig+0x4cc>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7fe fdda 	bl	8000760 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7fe fdd6 	bl	8000760 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e026      	b.n	8001c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc2:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x498>
 8001bce:	e01e      	b.n	8001c0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d107      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e019      	b.n	8001c10 <HAL_RCC_OscConfig+0x4f8>
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40007000 	.word	0x40007000
 8001be4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001be8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <HAL_RCC_OscConfig+0x500>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000

08001c1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0d0      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c30:	4b6a      	ldr	r3, [pc, #424]	@ (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d910      	bls.n	8001c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3e:	4b67      	ldr	r3, [pc, #412]	@ (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 0207 	bic.w	r2, r3, #7
 8001c46:	4965      	ldr	r1, [pc, #404]	@ (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b63      	ldr	r3, [pc, #396]	@ (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0b8      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d020      	beq.n	8001cae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c78:	4b59      	ldr	r3, [pc, #356]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4a58      	ldr	r2, [pc, #352]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c90:	4b53      	ldr	r3, [pc, #332]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a52      	ldr	r2, [pc, #328]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c9c:	4b50      	ldr	r3, [pc, #320]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	494d      	ldr	r1, [pc, #308]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d040      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b47      	ldr	r3, [pc, #284]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d115      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e07f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cda:	4b41      	ldr	r3, [pc, #260]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d109      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e073      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cea:	4b3d      	ldr	r3, [pc, #244]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e06b      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cfa:	4b39      	ldr	r3, [pc, #228]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f023 0203 	bic.w	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4936      	ldr	r1, [pc, #216]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d0c:	f7fe fd28 	bl	8000760 <HAL_GetTick>
 8001d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d12:	e00a      	b.n	8001d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d14:	f7fe fd24 	bl	8000760 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e053      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 020c 	and.w	r2, r3, #12
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d1eb      	bne.n	8001d14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b27      	ldr	r3, [pc, #156]	@ (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d210      	bcs.n	8001d6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b24      	ldr	r3, [pc, #144]	@ (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 0207 	bic.w	r2, r3, #7
 8001d52:	4922      	ldr	r1, [pc, #136]	@ (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b20      	ldr	r3, [pc, #128]	@ (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e032      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d78:	4b19      	ldr	r3, [pc, #100]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4916      	ldr	r1, [pc, #88]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d009      	beq.n	8001daa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d96:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	490e      	ldr	r1, [pc, #56]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001daa:	f000 f821 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001dae:	4602      	mov	r2, r0
 8001db0:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	490a      	ldr	r1, [pc, #40]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbc:	5ccb      	ldrb	r3, [r1, r3]
 8001dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc2:	4a09      	ldr	r2, [pc, #36]	@ (8001de8 <HAL_RCC_ClockConfig+0x1cc>)
 8001dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dc6:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <HAL_RCC_ClockConfig+0x1d0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fc86 	bl	80006dc <HAL_InitTick>

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40022000 	.word	0x40022000
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08002384 	.word	0x08002384
 8001de8:	20000000 	.word	0x20000000
 8001dec:	20000004 	.word	0x20000004

08001df0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d002      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x30>
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d003      	beq.n	8001e26 <HAL_RCC_GetSysClockFreq+0x36>
 8001e1e:	e027      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e20:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e22:	613b      	str	r3, [r7, #16]
      break;
 8001e24:	e027      	b.n	8001e76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	0c9b      	lsrs	r3, r3, #18
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	4a17      	ldr	r2, [pc, #92]	@ (8001e8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e30:	5cd3      	ldrb	r3, [r2, r3]
 8001e32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d010      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	0c5b      	lsrs	r3, r3, #17
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	4a11      	ldr	r2, [pc, #68]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e4a:	5cd3      	ldrb	r3, [r2, r3]
 8001e4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a0d      	ldr	r2, [pc, #52]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e52:	fb03 f202 	mul.w	r2, r3, r2
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	e004      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a0c      	ldr	r2, [pc, #48]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e64:	fb02 f303 	mul.w	r3, r2, r3
 8001e68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	613b      	str	r3, [r7, #16]
      break;
 8001e6e:	e002      	b.n	8001e76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e72:	613b      	str	r3, [r7, #16]
      break;
 8001e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e76:	693b      	ldr	r3, [r7, #16]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	007a1200 	.word	0x007a1200
 8001e8c:	08002394 	.word	0x08002394
 8001e90:	080023a4 	.word	0x080023a4
 8001e94:	003d0900 	.word	0x003d0900

08001e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <RCC_Delay+0x34>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <RCC_Delay+0x38>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0a5b      	lsrs	r3, r3, #9
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001eb4:	bf00      	nop
  }
  while (Delay --);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	60fa      	str	r2, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f9      	bne.n	8001eb4 <RCC_Delay+0x1c>
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	10624dd3 	.word	0x10624dd3

08001ed4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e093      	b.n	8002010 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d106      	bne.n	8001f02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7fe fb35 	bl	800056c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2202      	movs	r2, #2
 8001f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f18:	f023 0307 	bic.w	r3, r3, #7
 8001f1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3304      	adds	r3, #4
 8001f26:	4619      	mov	r1, r3
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f000 f903 	bl	8002134 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f56:	f023 0303 	bic.w	r3, r3, #3
 8001f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	4313      	orrs	r3, r2
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001f74:	f023 030c 	bic.w	r3, r3, #12
 8001f78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001f80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	4313      	orrs	r3, r2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	011a      	lsls	r2, r3, #4
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	031b      	lsls	r3, r3, #12
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001fb2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002028:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002030:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002038:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002040:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d110      	bne.n	800206a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d102      	bne.n	8002054 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800204e:	7b7b      	ldrb	r3, [r7, #13]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d001      	beq.n	8002058 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e069      	b.n	800212c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002068:	e031      	b.n	80020ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b04      	cmp	r3, #4
 800206e:	d110      	bne.n	8002092 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002070:	7bbb      	ldrb	r3, [r7, #14]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002076:	7b3b      	ldrb	r3, [r7, #12]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d001      	beq.n	8002080 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e055      	b.n	800212c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002090:	e01d      	b.n	80020ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d108      	bne.n	80020aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002098:	7bbb      	ldrb	r3, [r7, #14]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d105      	bne.n	80020aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800209e:	7b7b      	ldrb	r3, [r7, #13]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d102      	bne.n	80020aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80020a4:	7b3b      	ldrb	r3, [r7, #12]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d001      	beq.n	80020ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e03e      	b.n	800212c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2202      	movs	r2, #2
 80020b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2202      	movs	r2, #2
 80020ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2202      	movs	r2, #2
 80020c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2202      	movs	r2, #2
 80020ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_TIM_Encoder_Start+0xc4>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d008      	beq.n	80020ec <HAL_TIM_Encoder_Start+0xd4>
 80020da:	e00f      	b.n	80020fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2201      	movs	r2, #1
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 f893 	bl	8002210 <TIM_CCxChannelCmd>
      break;
 80020ea:	e016      	b.n	800211a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2201      	movs	r2, #1
 80020f2:	2104      	movs	r1, #4
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 f88b 	bl	8002210 <TIM_CCxChannelCmd>
      break;
 80020fa:	e00e      	b.n	800211a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2201      	movs	r2, #1
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f000 f883 	bl	8002210 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2201      	movs	r2, #1
 8002110:	2104      	movs	r1, #4
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f87c 	bl	8002210 <TIM_CCxChannelCmd>
      break;
 8002118:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0201 	orr.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a2f      	ldr	r2, [pc, #188]	@ (8002204 <TIM_Base_SetConfig+0xd0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d00b      	beq.n	8002164 <TIM_Base_SetConfig+0x30>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002152:	d007      	beq.n	8002164 <TIM_Base_SetConfig+0x30>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a2c      	ldr	r2, [pc, #176]	@ (8002208 <TIM_Base_SetConfig+0xd4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d003      	beq.n	8002164 <TIM_Base_SetConfig+0x30>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a2b      	ldr	r2, [pc, #172]	@ (800220c <TIM_Base_SetConfig+0xd8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d108      	bne.n	8002176 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800216a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a22      	ldr	r2, [pc, #136]	@ (8002204 <TIM_Base_SetConfig+0xd0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00b      	beq.n	8002196 <TIM_Base_SetConfig+0x62>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002184:	d007      	beq.n	8002196 <TIM_Base_SetConfig+0x62>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a1f      	ldr	r2, [pc, #124]	@ (8002208 <TIM_Base_SetConfig+0xd4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d003      	beq.n	8002196 <TIM_Base_SetConfig+0x62>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a1e      	ldr	r2, [pc, #120]	@ (800220c <TIM_Base_SetConfig+0xd8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d108      	bne.n	80021a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800219c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002204 <TIM_Base_SetConfig+0xd0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d103      	bne.n	80021dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f023 0201 	bic.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]
  }
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	40012c00 	.word	0x40012c00
 8002208:	40000400 	.word	0x40000400
 800220c:	40000800 	.word	0x40000800

08002210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	2201      	movs	r2, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a1a      	ldr	r2, [r3, #32]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	43db      	mvns	r3, r3
 8002232:	401a      	ands	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a1a      	ldr	r2, [r3, #32]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	431a      	orrs	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	621a      	str	r2, [r3, #32]
}
 800224e:	bf00      	nop
 8002250:	371c      	adds	r7, #28
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800226c:	2302      	movs	r3, #2
 800226e:	e046      	b.n	80022fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4313      	orrs	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a16      	ldr	r2, [pc, #88]	@ (8002308 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00e      	beq.n	80022d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022bc:	d009      	beq.n	80022d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a12      	ldr	r2, [pc, #72]	@ (800230c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d004      	beq.n	80022d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a10      	ldr	r2, [pc, #64]	@ (8002310 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d10c      	bne.n	80022ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	40012c00 	.word	0x40012c00
 800230c:	40000400 	.word	0x40000400
 8002310:	40000800 	.word	0x40000800

08002314 <memset>:
 8002314:	4603      	mov	r3, r0
 8002316:	4402      	add	r2, r0
 8002318:	4293      	cmp	r3, r2
 800231a:	d100      	bne.n	800231e <memset+0xa>
 800231c:	4770      	bx	lr
 800231e:	f803 1b01 	strb.w	r1, [r3], #1
 8002322:	e7f9      	b.n	8002318 <memset+0x4>

08002324 <__libc_init_array>:
 8002324:	b570      	push	{r4, r5, r6, lr}
 8002326:	2600      	movs	r6, #0
 8002328:	4d0c      	ldr	r5, [pc, #48]	@ (800235c <__libc_init_array+0x38>)
 800232a:	4c0d      	ldr	r4, [pc, #52]	@ (8002360 <__libc_init_array+0x3c>)
 800232c:	1b64      	subs	r4, r4, r5
 800232e:	10a4      	asrs	r4, r4, #2
 8002330:	42a6      	cmp	r6, r4
 8002332:	d109      	bne.n	8002348 <__libc_init_array+0x24>
 8002334:	f000 f81a 	bl	800236c <_init>
 8002338:	2600      	movs	r6, #0
 800233a:	4d0a      	ldr	r5, [pc, #40]	@ (8002364 <__libc_init_array+0x40>)
 800233c:	4c0a      	ldr	r4, [pc, #40]	@ (8002368 <__libc_init_array+0x44>)
 800233e:	1b64      	subs	r4, r4, r5
 8002340:	10a4      	asrs	r4, r4, #2
 8002342:	42a6      	cmp	r6, r4
 8002344:	d105      	bne.n	8002352 <__libc_init_array+0x2e>
 8002346:	bd70      	pop	{r4, r5, r6, pc}
 8002348:	f855 3b04 	ldr.w	r3, [r5], #4
 800234c:	4798      	blx	r3
 800234e:	3601      	adds	r6, #1
 8002350:	e7ee      	b.n	8002330 <__libc_init_array+0xc>
 8002352:	f855 3b04 	ldr.w	r3, [r5], #4
 8002356:	4798      	blx	r3
 8002358:	3601      	adds	r6, #1
 800235a:	e7f2      	b.n	8002342 <__libc_init_array+0x1e>
 800235c:	080023a8 	.word	0x080023a8
 8002360:	080023a8 	.word	0x080023a8
 8002364:	080023a8 	.word	0x080023a8
 8002368:	080023ac 	.word	0x080023ac

0800236c <_init>:
 800236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236e:	bf00      	nop
 8002370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002372:	bc08      	pop	{r3}
 8002374:	469e      	mov	lr, r3
 8002376:	4770      	bx	lr

08002378 <_fini>:
 8002378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237a:	bf00      	nop
 800237c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237e:	bc08      	pop	{r3}
 8002380:	469e      	mov	lr, r3
 8002382:	4770      	bx	lr
